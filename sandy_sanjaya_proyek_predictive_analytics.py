# -*- coding: utf-8 -*-
"""Sandy Sanjaya_Proyek Predictive Analytics.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1QMFprxlqHc0avJN5iLeNfXq0_AJZ2apL

# **Proyek Predictive Analytics: [Energy Consumption Prediction]**
*   Nama: Sandy Sanjaya
*   Email: sandyysanjayaa@upi.edu
*   ID Dicoding: Sandy Sanjaya

# **Import Library**

Mengimpor library yang dibutuhkan untuk manipulasi data, visualisasi, dan pemodelan machine learning
"""

# Melakukan import library
import pandas as pd
import numpy as np
import os
import matplotlib.pyplot as plt
import plotly.express as px
import seaborn as sns
import datetime

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression , Ridge , Lasso
from sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor
from sklearn.preprocessing import StandardScaler, LabelEncoder , OneHotEncoder

from xgboost import XGBRegressor
from sklearn.metrics import mean_squared_error, r2_score , mean_absolute_error

from plotly.subplots import make_subplots
import plotly.graph_objects as go

import warnings
warnings.filterwarnings("ignore")

"""# **Load Dataset**

Melakukan load data set energy consumption
"""

# Load Dataset
dataset_path = 'Energy_consumption_dataset.csv'
df = pd.read_csv(dataset_path)

# Tampilkan 5 baris pertama
df.head()

"""# **Deskripsi Data**
Month : Menunjukkan bulan dalam setahun (1–12). Berguna untuk mengelompokkan data berdasarkan musim.

Hour : Menunjukkan waktu dalam satu hari (0–23). Dapat digunakan untuk mengelompokkan waktu menjadi pagi, siang, sore, dan malam.

DayOfWeek : Variabel kategorikal yang menunjukkan hari dalam satu minggu.

Holiday : Variabel kategorikal bertipe boolean yang menunjukkan apakah hari tersebut merupakan hari libur atau bukan.

Temperature : Variabel numerik yang menunjukkan suhu dalam derajat Celcius.

Humidity : Variabel numerik yang menunjukkan tingkat kelembapan dalam persen.

SquareFootage : Variabel numerik yang mengukur luas bangunan atau ruangan (dalam satuan kaki persegi).

Occupancy : Variabel numerik yang menunjukkan jumlah orang yang berada di area tersebut.

HVACUsage : Variabel kategorikal yang menunjukkan penggunaan sistem pemanas, ventilasi, dan pendingin udara (HVAC).

LightingUsage : Variabel kategorikal yang menunjukkan penggunaan sistem pencahayaan.

RenewableEnergy : Variabel numerik yang menunjukkan persentase kontribusi dari sumber energi terbarukan.

EnergyConsumption : Variabel target numerik yang menunjukkan total energi yang dikonsumsi.

# **Exploratory Data Analysis (EDA)**

Menampilkan informasi umum tentang dataset seperti jumlah entri, kolom, tipe data, dan nilai non-null pada tiap kolom
"""

# Menampilkan informasi umum tentang dataset
df.info()

"""Menampilkan statistik deskriptif seperti mean, median, standar deviasi, nilai minimum dan maksimum untuk kolom numerik"""

# Menampilkan statistik deskriptif
df.describe()

"""Cek apakah terdapat data yang kosong pada masing-masing fitur"""

# Mengecek missing values
missing_values = pd.DataFrame(df.isna().sum().reset_index(name='Jumlah Missing'))
missing_values.columns = ['Kolom', 'Jumlah Missing']
missing_values

"""Cek apakah terdapat data yang duplikat"""

# Mengecek data duplikat
df.duplicated().sum()

"""Cek apakah terdapat data yang mengalami outliers"""

# Identifikasi kolom numerik dan kategorikal
num_cols = df.select_dtypes(include=['int64', 'float64']).columns
cat_cols = df.select_dtypes(exclude=['int64', 'float64']).columns

# Tampilkan kolom numerik dan kategorikal
num_cols, cat_cols

# Visualisasi outliers dengan boxplot
f, ax = plt.subplots(4, 2, figsize=(15, 10))
ax = ax.flatten()

for index, cols in enumerate(num_cols):
    sns.boxplot(df, x=cols, ax=ax[index])
    ax[index].set_title(cols)

plt.tight_layout()
plt.show()

"""# **Univariate Analysis**

**Analisis univariat dilakukan untuk memahami karakteristik masing-masing variabel secara individu, seperti distribusi, sebaran, dan nilai ekstrem.**

## **Numerical Features**

Membuat visualisasi distribusi data numerik menggunakan histogram dan kurva KDE untuk memahami pola sebaran tiap fitur
"""

# Visualisasi distribusi dengan histogram dan KDE
f, ax = plt.subplots(2, 4, figsize=(15, 10))
ax = ax.flatten()

for index, cols in enumerate(num_cols):
    sns.histplot(data=df, x=cols, ax=ax[index], kde=True)
    ax[index].set_title(cols)

plt.tight_layout()
plt.show()

"""## **Categorical Features**

Membuat visualisasi frekuensi data kategorikal untuk melihat sebaran jumlah tiap kategori dalam masing-masing fitur.
"""

# Visualisasi distribusi kategori
f, ax = plt.subplots(2, 2, figsize=(15, 10))
ax = ax.flatten()

for index, cols in enumerate(cat_cols):
    sns.countplot(df, x=cols, ax=ax[index])
    ax[index].set_title(cols)

plt.tight_layout()
plt.show()

"""# **Multivariate Analysis**

**Analisis multivariat dilakukan untuk memahami hubungan atau pola antar dua atau lebih variabel dalam dataset.**

Menampilkan tren rata-rata konsumsi energi bulanan untuk mengamati pola musiman atau fluktuasi sepanjang tahun
"""

# Rata-rata konsumsi energi per bulan
mas = df.groupby(['Month'])['EnergyConsumption'].mean().reset_index(name = 'Average EC')

plt.figure(figsize=(10,7))
sns.lineplot(mas, x = 'Month', y= 'Average EC', marker = 'o')
plt.title('Changes in average energy consumption by Month')
plt.show()

"""Menampilkan rata-rata konsumsi energi per jam untuk mengidentifikasi pola penggunaan energi dalam sehari"""

# Rata-rata konsumsi energi per jam
mhs = df.groupby(['Hour'])['EnergyConsumption'].mean().reset_index(name = 'Average EC')

plt.figure(figsize=(10,7))
sns.lineplot(mhs, x = 'Hour', y= 'Average EC', marker = 'o')
plt.title('Changes in average energy consumption by Hour')
plt.show()

"""Menampilkan rata-rata konsumsi energi berdasarkan hari dalam seminggu untuk melihat perbedaan pola konsumsi antar hari"""

# Rata-rata konsumsi energi per hari dalam seminggu
dowec = df.groupby(['DayOfWeek'])['EnergyConsumption'].mean().reset_index(name = 'Average EC')

plt.figure(figsize=(10,7))
ax = sns.barplot(data = dowec, x = 'DayOfWeek', y = 'Average EC')
ax.bar_label(ax.containers[0], fontsize=10)
plt.title('Average energy consumption by day of the week')
plt.show()

"""Menampilkan pairplot untuk mengeksplorasi hubungan antar fitur numerik dan distribusinya"""

# Visualisasi hubungan pasangan fitur numerik
sns.pairplot(df[num_cols], diag_kind='kde')
plt.suptitle('Pairplot of Numerical Features', y=1.02)
plt.show()

"""Menampilkan heatmap korelasi untuk mengidentifikasi hubungan linear antar fitur numerik"""

# Visualisasi melalui correlation matrix
plt.figure(figsize=(12, 8))
sns.heatmap(df[num_cols].corr(), annot=True, cmap='coolwarm', fmt=".2f")
plt.title('Correlation Heatmap of Numerical Features')
plt.show()

"""# **Data Preparation/Data Preprocessing**

## **Encoding Fitur Kategori**

Melakukan label encoding pada fitur kategorikal untuk mengubah nilai kategori menjadi format numerik
"""

# Label Encoding fitur kategorikal
label_encoder = LabelEncoder()
for col in cat_cols:
    df[col] = label_encoder.fit_transform(df[col])
df.head()

"""## **Train Test Split**

Memisahkan fitur dan target, lalu membagi data menjadi data latih dan data uji dengan proporsi 80:20
"""

# Memisahkan fitur (X) dan target (y)
x = df.drop(['EnergyConsumption'], axis=1)
y = df['EnergyConsumption']

# Membagi data menjadi data latih (80%) dan data uji (20%)
x_train, x_test, y_train, y_test = train_test_split(
    x, y, test_size=0.2, random_state=42
)

print(f'Total # of sample in whole dataset: {len(x)}')
print(f'Total # of sample in train dataset: {len(x_train)}')
print(f'Total # of sample in test dataset: {len(x_test)}')

"""## **Standardisasi**

Melakukan standarisasi fitur numerik pada data latih untuk mengatur skala nilai agar model lebih optimal
"""

# Identifikasi kolom numerik (kecuali target)
num_features = x.select_dtypes(include=['int64', 'float64']).columns

# Inisialisasi scaler
scaler = StandardScaler()

# Fit dan transform hanya pada training set
x_train[num_features] = scaler.fit_transform(x_train[num_features])

x_train[num_features].describe().round(4)

"""# **Model Development**

Menginisialisasi berbagai model regresi untuk dibandingkan performanya dalam prediksi
"""

# Inisialisasi model-model regresi
rfc = RandomForestRegressor()       # Random Forest Regressor
gbc = GradientBoostingRegressor()   # Gradient Boosting Regressor
lnr = LinearRegression()            # Linear Regression
rid = Ridge(alpha=1.0)              # Ridge Regression dengan alpha 1.0
las = Lasso(alpha=1.0)              # Lasso Regression dengan alpha 1.0
xgb = XGBRegressor()                # XGBoost Regressor

# Gabungkan semua model ke dalam list untuk evaluasi
models = [rfc, gbc, lnr, rid, las, xgb]

# Daftar nama model (untuk keperluan tampilan hasil evaluasi)
names = [
    "Random Forest",
    "Gradient Boosting",
    "Linear Regression",
    "Ridge",
    "Lasso",
    "XGBoost"
]

"""# **Evaluasi Model**

Mentransformasi fitur numerik pada data uji menggunakan scaler yang sudah di-fit pada data latih untuk menjaga konsistensi skala
"""

# Transform pada test set menggunakan scaler yang sudah di-fit dari training
x_test[num_features] = scaler.transform(x_test[num_features])

"""Melatih setiap model regresi, menghitung metrik evaluasi (MSE, RMSE, MAE, R²) pada data latih dan uji, lalu menyimpan hasilnya untuk perbandingan performa"""

# Buat dictionary model
model_dict = {
    "Random Forest": rfc,
    "Gradient Boosting": gbc,
    "Linear Regression": lnr,
    "Ridge": rid,
    "Lasso": las,
    "XGBoost": xgb
}

# Inisialisasi DataFrame untuk menyimpan hasil evaluasi
metrics_df = pd.DataFrame(
    columns=['MSE_train', 'MSE_test', 'RMSE_train', 'RMSE_test',
             'MAE_train', 'MAE_test', 'R2_train', 'R2_test'],
    index=model_dict.keys()
)

# Loop untuk menghitung metrik evaluasi untuk setiap model
for name, model in model_dict.items():
    model.fit(x_train, y_train)

    # Prediksi data train dan test
    y_train_pred = model.predict(x_train)
    y_test_pred = model.predict(x_test)

    # Hitung metrik untuk train
    mse_train = mean_squared_error(y_train, y_train_pred)
    rmse_train = np.sqrt(mse_train)
    mae_train = mean_absolute_error(y_train, y_train_pred)
    r2_train = r2_score(y_train, y_train_pred)

    # Hitung metrik untuk test
    mse_test = mean_squared_error(y_test, y_test_pred)
    rmse_test = np.sqrt(mse_test)
    mae_test = mean_absolute_error(y_test, y_test_pred)
    r2_test = r2_score(y_test, y_test_pred)

    # Simpan hasil ke DataFrame
    metrics_df.loc[name] = [
        mse_train, mse_test, rmse_train, rmse_test,
        mae_train, mae_test, r2_train, r2_test
    ]

# Tampilkan hasil evaluasi
metrics_df

"""Menampilkan perbandingan MSE pada data uji untuk tiap model dalam bentuk horizontal bar chart agar mudah melihat model dengan error terbesar hingga terkecil"""

# Plot horizontal bar chart berdasarkan MSE_test
fig, ax = plt.subplots(figsize=(8, 5))  # Ukuran bisa disesuaikan

# Urutkan berdasarkan nilai MSE test dari tertinggi ke terendah
metrics_df.sort_values(by='MSE_test', ascending=False)['MSE_test'].plot(
    kind='barh',
    ax=ax,
    color='skyblue',
    zorder=3
)

# Tambahkan grid di bawah bar
ax.set_title("Perbandingan MSE pada Data Test untuk Setiap Model")
ax.set_xlabel("MSE (Mean Squared Error)")
ax.set_ylabel("Model")
ax.grid(zorder=0, linestyle='--', alpha=0.6)
plt.tight_layout()
plt.show()

"""Menampilkan perbandingan RMSE pada data uji untuk setiap model dalam bentuk horizontal bar chart guna memudahkan evaluasi performa model"""

# Plot horizontal bar chart berdasarkan RMSE_test
fig, ax = plt.subplots(figsize=(8, 5))

# Urutkan berdasarkan nilai RMSE test dari tertinggi ke terendah
metrics_df.sort_values(by='RMSE_test', ascending=False)['RMSE_test'].plot(
    kind='barh',
    ax=ax,
    color='skyblue',
    zorder=3
)

# Tambahkan grid di bawah bar
ax.set_title("Perbandingan RMSE pada Data Test untuk Setiap Model")
ax.set_xlabel("RMSE (Root Mean Squared Error)")
ax.set_ylabel("Model")
ax.grid(zorder=0, linestyle='--', alpha=0.6)
plt.tight_layout()
plt.show()

"""Melakukan prediksi pada satu sampel data uji menggunakan semua model, lalu menyimpan dan menampilkan hasil prediksi beserta nilai sebenarnya untuk perbandingan"""

# Ambil satu sampel dari data uji untuk prediksi
prediksi = x_test.iloc[:1].copy()

# Buat dictionary awal untuk menyimpan hasil prediksi
pred_dict = {'y_true': y_test.iloc[:1].values[0]}  # Ambil nilai y_test yang sesuai

# Loop melalui setiap model dan simpan hasil prediksi ke dalam dictionary
for name, model in model_dict.items():
    prediksi_model = model.predict(prediksi)[0]  # Prediksi satu nilai
    pred_dict[f'prediksi_{name}'] = round(prediksi_model, 2)  # Simpan dengan pembulatan 2 desimal

# Tampilkan hasil prediksi dalam bentuk DataFrame
pd.DataFrame([pred_dict])